---
# Step 2.1: Install Docker and its dependent components.
- hosts: all
  become: true
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    ## changes for Configuring a cgroup driver
    - name: Create directory /etc/docker
      file:
        path: /etc/docker
        state: directory
        mode: "0755"

    - name: Copy daemon.json to /etc/docker folder
      ansible.builtin.copy:
        src: daemon.json
        dest: /etc/docker/daemon.json

    - name: Restart docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    # Step 2.2: Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    # Step 2.3: Installing kubelet, kubeadm and kubectl using the below code.

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet={{ k8s_version }}
          - kubeadm={{ k8s_version }}
          - kubectl={{ k8s_version }}

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        create: yes
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    # Step 2.3: Initialize the Kubernetes cluster with kubeadm using the below code (applicable only on master node).

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

    # Step 2.4: Setup the kube config file for the vagrant user to access the Kubernetes cluster using the below code.

    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/vagrant/.kube
        - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        - chown vagrant:vagrant /home/vagrant/.kube/config

    # Step 2.5: Setup the container networking provider and the network policy engine using the below code.

    - name: Install calico pod network
      become: false
      command: kubectl create -f https://docs.projectcalico.org/archive/v3.20/manifests/calico.yaml

    # Step 2.6: Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command.

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      tags:
        - join-command

    - name: Copy join command to local file
      delegate_to: localhost
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: ./join-command
      become: false
      tags:
        - join-command

  # Step 2.7: Setup a handler for checking Docker daemon using the below code.
  handlers:
    - name: docker status
      service: name=docker state=started
